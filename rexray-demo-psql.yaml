AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  CIDRSubnet1:
    Type: String
    Default: "192.168.1.0/24"
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Description: Enter the CIDR Range for your VPC
    MaxLength: "18"
    MinLength: "9"

  CIDRVPC:
    Type: String
    Default: "192.168.0.0/16"
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Description: Enter the CIDR Range for your VPC
    MaxLength: "18"
    MinLength: "9"

  DesiredCapacity:
    Type: Number
    Default: "2"
    Description: Number of instances to launch in your ECS cluster

  ECSAMI:
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id
    Description: AMI ID

  InstanceType:
    Type: String
    Default: t2.medium
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - c3.large
      - c3.xlarge
      - c3.2xlarge
      - c3.4xlarge
      - c3.8xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - r3.large
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - r3.8xlarge
      - i2.xlarge
      - i2.2xlarge
      - i2.4xlarge
      - i2.8xlarge
      - d2.xlarge
      - d2.2xlarge
      - d2.4xlarge
      - d2.8xlarge
      - hi1.4xlarge
      - hs1.8xlarge
      - cr1.8xlarge
      - cc2.8xlarge
    ConstraintDescription: must be a valid EC2 instance type.
    Description: The EC2 instance type

  KeyName:
    Type: "AWS::EC2::KeyPair::KeyName"
    Description: Name of an existing EC2 KeyPair to enable SSH access to the ECS instances

  SSHLocation:
    Type: String
    Default: "0.0.0.0/0"
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Description: " The IP address range that can be used to SSH to the EC2 instances"
    MaxLength: "18"
    MinLength: "9"

Resources:
  CWLogsGroup:
    Type: "AWS::Logs::LogGroup"

  ContainerInstances:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Metadata:
      "AWS::CloudFormation::Init":
        config:
          commands:
            "01_add_instance_to_cluster":
              command: !Sub echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
            "02_start_ecs_agent":
              command: start ecs
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub "[main]\nstack=${AWS::StackId}\nregion=${AWS::Region}\n"
              group: root
              mode: 256
              owner: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub "[cfn-auto-reloader-hook]\ntriggers=post.update\npath=Resources.ContainerInstances.Metadata.AWS::CloudFormation::Init\naction=/opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource ContainerInstances\n"
          packages:
            yum:
              aws-cli: []
              ecs-init: []
              jq: []
          services:
            sysvinit:
              cfn-hup:
                enabled: "true"
                ensureRunning: "true"
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref EC2InstanceProfile
      ImageId: !Ref ECSAMI
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      SecurityGroups:
        - Ref: InstanceSecurityGroup
      UserData: !Base64
        "Fn::Sub": "#!/bin/bash\nyum install -y aws-cfn-bootstrap\n/opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource ContainerInstances\n/opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSAutoScalingGroup\n\nexec 2>>/var/log/ecs/ecs-agent-install.log\nset -x\nuntil curl -s http://localhost:51678/v1/metadata\ndo\n   sleep 1\ndone\ndocker plugin install rexray/ebs REXRAY_PREEMPT=true EBS_REGION=us-west-2 --grant-all-permissions\nstop ecs \nstart ecs\n"

  EC2InstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: /
      Roles:
        - Ref: EC2Role

  EC2Role:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument: "{\n  \"Statement\": [{\n      \"Action\": \"sts:AssumeRole\",\n      \"Effect\": \"Allow\",\n      \"Principal\": {\n        \"Service\": \"ec2.amazonaws.com\"\n      }\n  }]\n}\n"
      Path: /
      Policies:
        - PolicyName: ECSforEC2InstanceRolePolicy
          PolicyDocument: "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"ecs:CreateCluster\",\n        \"ecs:DeregisterContainerInstance\",\n        \"ecs:DiscoverPollEndpoint\",\n        \"ecs:Poll\",\n        \"ecs:RegisterContainerInstance\",\n        \"ecs:StartTelemetrySession\",\n        \"ecs:Submit*\",\n        \"ecr:GetAuthorizationToken\",\n        \"ecr:BatchCheckLayerAvailability\",\n        \"ecr:GetDownloadUrlForLayer\",\n        \"ecr:BatchGetImage\",\n        \"logs:CreateLogStream\",\n        \"logs:PutLogEvents\"\n      ],\n      \"Resource\": \"*\"\n    }\n  ]\n}\n"
        - PolicyName: RexrayPolicy
          PolicyDocument: "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [{\n    \"Effect\": \"Allow\",\n    \"Action\": [\n      \"ec2:AttachVolume\",\n      \"ec2:CreateVolume\",\n      \"ec2:CreateSnapshot\",\n      \"ec2:CreateTags\",\n      \"ec2:DeleteVolume\",\n      \"ec2:DeleteSnapshot\",\n      \"ec2:DescribeAvailabilityZones\",\n      \"ec2:DescribeInstances\",\n      \"ec2:DescribeVolumes\",\n      \"ec2:DescribeVolumeAttribute\",\n      \"ec2:DescribeVolumeStatus\",\n      \"ec2:DescribeSnapshots\",\n      \"ec2:CopySnapshot\",\n      \"ec2:DescribeSnapshotAttribute\",\n      \"ec2:DetachVolume\",\n      \"ec2:ModifySnapshotAttribute\",\n      \"ec2:ModifyVolumeAttribute\",\n      \"ec2:DescribeTags\"\n    ],\n    \"Resource\": \"*\"\n  }]\n}\n"

  ECSAutoScalingGroup:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    Properties:
      AvailabilityZones:
        - "Fn::Select":
            - "0"
            - "Fn::GetAZs": !Ref "AWS::Region"
      DesiredCapacity: "2"
      LaunchConfigurationName: !Ref ContainerInstances
      MaxSize: "2"
      MinSize: "2"
      Tags:
        - Key: Name
          PropagateAtLaunch: "true"
          Value: ECS host
      VPCZoneIdentifier:
        - Ref: Subnet1
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: "1"
        MinInstancesInService: "1"
        PauseTime: PT15M
        SuspendProcesses:
          - HealthCheck
          - ReplaceUnhealthy
          - AZRebalance
          - AlarmNotification
          - ScheduledActions
        WaitOnResourceSignals: "true"

  ECSCluster:
    Type: "AWS::ECS::Cluster"
    Properties:
      ClusterName: rexray-demo

  ECSServiceAutoScalingRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Action:
            - "sts:AssumeRole"
          Effect: Allow
          Principal:
            Service:
              - application-autoscaling.amazonaws.com
      Path: /
      Policies:
        - PolicyName: ecs-service-autoscaling
          PolicyDocument:
            Statement:
              Action:
                - "application-autoscaling:*"
                - "cloudwatch:DescribeAlarms"
                - "cloudwatch:PutMetricAlarm"
                - "ecs:DescribeServices"
                - "ecs:UpdateService"
              Effect: Allow
              Resource: "*"

  GatewayToInternet:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  InstanceSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
        - CidrIp: !Ref SSHLocation
          FromPort: "22"
          IpProtocol: tcp
          ToPort: "22"
        - CidrIp: !Ref SSHLocation
          FromPort: "5432"
          IpProtocol: tcp
          ToPort: "5432"
      VpcId: !Ref VPC

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: Application
          Value: !Ref "AWS::StackName"
        - Key: Network
          Value: Public

  MySQLTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      Port: 5432
      Protocol: TCP
      TargetType: ip
      VpcId: !Ref VPC

  NLBListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref MySQLTargetGroup
      LoadBalancerArn: !Ref NetworkLoadBalancer
      Port: 5432
      Protocol: TCP

  NetworkLoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Scheme: internet-facing
      Subnets:
        - Ref: Subnet1
      Type: network

  PublicRoute:
    Type: "AWS::EC2::Route"
    DependsOn:
      - PublicRouteTable
      - InternetGateway
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable

  PublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    DependsOn:
      - VPC
    Properties:
      Tags:
        - Key: Application
          Value: !Ref "AWS::StackName"
        - Key: Network
          Value: Public
      VpcId: !Ref VPC

  PublicSubnetRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    DependsOn:
      - Subnet1
      - PublicRouteTable
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref Subnet1

  Subnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select
        - "0"
        - "Fn::GetAZs": !Ref "AWS::Region"
      CidrBlock: !Ref CIDRSubnet1
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC

  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: !Ref CIDRVPC
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: Volume-Driver VPC

Outputs:
  AWSRegion:
    Description: The name of the region where the stack was launched
    Value: !Ref "AWS::Region"

  AvailabilityZone:
    Description: The AZ where the instances are deployed
    Value: !GetAtt Subnet1.AvailabilityZone

  CWLogGroupName:
    Description: The name of the CWLogs group
    Value: !Ref CWLogsGroup

  ECSClusterName:
    Description: The name of the ECS cluster
    Value: !Ref ECSCluster

  MySQLTargetGroupArn:
    Description: The Arn of the MySQL target group
    Value: !Ref MySQLTargetGroup

  NLBFullyQualifiedName:
    Description: The fully qualified name of the NLB
    Value: !GetAtt NetworkLoadBalancer.DNSName

  NLBName:
    Description: The name of the NLB
    Value: !GetAtt NetworkLoadBalancer.LoadBalancerName

  SecurityGroupId:
    Description: The ID of security group that the instances are members of
    Value: !Ref InstanceSecurityGroup

  SubnetId:
    Description: The ID of the subnet that the instances are associated with
    Value: !Ref Subnet1
