AWSTemplateFormatVersion: "2010-09-09"

Description: Compute layer for EC2 + ECS autoscaling groups for TinyDevCRM. Uses public VPC subnets and a public-facing load balancer.

Parameters:
  EC2DesiredCapacity:
    Type: Number
    Default: "2"
    Description: Average number of EC2 instances to launch in the ECS cluster.

  EC2InstanceType:
    Type: String
    Default: t2.medium
    Description: Instance type of the EC2 instance acting as ECS host.

  EC2MaximumCapacity:
    Type: Number
    Default: "6"
    Description: Maximum number of EC2 instances to launch in the ECS cluster.

  EC2MinimumCapacity:
    Type: Number
    Default: "1"
    Description: Minimum number of EC2 instances to launch in the ECS cluster.

  ECSHostAMI:
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id
    Description: ID for the ECS-optimized EC2 AMI, updated to Amazon Linux 2.

  PublicSubnetAReference:
    Type: String
    Default: tinydevcrm-ec2-networking-subnet-a
    Description: "Reference to public subnet A as part of stack 'tinydevcrm-ec2-networking.yaml'."

  PublicSubnetBReference:
    Type: String
    Default: tinydevcrm-ec2-networking-subnet-b
    Description: "Reference to public subnet B as part of stack 'tinydevcrm-ec2-networking.yaml'."

  VPCReference:
    Type: String
    Default: tinydevcrm-ec2-networking-vpc
    Description: "Reference to VPC deployed as part of stack `tinydevcrm-ec2-networking.yaml`."

Resources:
  EC2AutoscalingRole:
    Type: "AWS::IAM::Role"
    Description: Role to define EC2 autoscaling. NOTE that the EC2 autoscaling group may fail to stabilize if this role is mis-defined.
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - application-autoscaling.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: /
      Policies:
        - PolicyName: service-autoscaling
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "application-autoscaling:*"
                  - "cloudwatch:DescribeAlarms"
                  - "cloudwatch:PutMetricAlarm"
                  - "ecs:DescribeServices"
                  - "ecs:UpdateService"
                Resource: "*"

  EC2HostsRole:
    Type: "AWS::IAM::Role"
    Description: "Role for EC2 hosts as passed by resource 'EC2InstanceProfile'. This allows the ECS agent on the EC2 hosts to communicate with the ECS control plane, and download container images from AWS ECR to run with the host."
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: /
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "ecs:CreateCluster"
                  - "ecs:DeregisterContainerInstance"
                  - "ecs:DiscoverPollEndpoint"
                  - "ecs:Poll"
                  - "ecs:RegisterContainerInstance"
                  - "ecs:StartTelemetrySession"
                  - "ecs:Submit*"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "ecr:GetAuthorizationToken"
                  - "ecr:BatchGetImage"
                  - "ecr:GetDownloadUrlForLayer"
                Resource: "*"

  EC2InstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: /
      Roles:
        - Ref: EC2HostsRole

  ECSAutoScalingGroup:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M
    Description: "This resource launches the actual EC2 instances that will register themselves as members of the ECS cluster, and run the Docker containers. CreationPolicy sets timeout after 5 minutes if the resource hasn't been created yet."
    Properties:
      DesiredCapacity: !Ref EC2DesiredCapacity
      LaunchConfigurationName: !Ref ECSLaunchConfiguration
      MaxSize: !Ref EC2MaximumCapacity
      MinSize: !Ref EC2MinimumCapacity
      VPCZoneIdentifier:
        - "Fn::ImportValue": !Ref PublicSubnetAReference
        - "Fn::ImportValue": !Ref PublicSubnetBReference
    UpdatePolicy:
      AutoscalingReplacingUpdate:
        WillReplace: true

  ECSCluster:
    Type: "AWS::ECS::Cluster"
    Description: ECS cluster for deploying ECS task and service definitions.
    Properties:
      ClusterName: !Sub ${AWS::StackName}-ecs-cluster

  ECSHostSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Description: Security group for the EC2 hosts that will run the containers.
    Properties:
      GroupDescription: Access to ECS hosts that run containers
      VpcId: !ImportValue
        Ref: VPCReference

  ECSLaunchConfiguration:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Description: Launch configuration for EC2 instances acting as ECS hosts.
    Properties:
      IamInstanceProfile: !Ref EC2InstanceProfile
      ImageId: !Ref ECSHostAMI
      InstanceType: !Ref EC2InstanceType
      SecurityGroups:
        - Ref: ECSHostSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ECSAutoScalingGroup --region ${AWS::Region}

  ECSSecurityGroupIngressFromPublicALB:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      Description: Ingress rule to ECS hosts from the public-facing application load balancer. IpProtocol of -1 allows all protocols / network traffic. SourceSecurityGroupId references the security group for the foreign resource.
      GroupId: !Ref ECSHostSecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref PublicLoadBalancerSecurityGroup

  ECSSecurityGroupIngressFromSelf:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      Description: Ingress rule to ECS hosts from other ECS hosts within the same security group.
      GroupId: !Ref ECSHostSecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref ECSHostSecurityGroup

  PublicLoadBalancerSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Security group for the public-facing load balancer. Allows access from anywhere on the Internet.
      SecurityGroupIngress:
        - CidrIp: "0.0.0.0/0"
          IpProtocol: -1
      VpcId: !ImportValue
        Ref: VPCReference

  PublicLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Description: Load balancer placed onto public subnets, so that network traffic from Internet can reach load balancer directly via the Internet gateway.
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '30'
      Subnets:
        - "Fn::ImportValue": !Ref PublicSubnetAReference
        - "Fn::ImportValue": !Ref PublicSubnetBReference
      SecurityGroups:
        - !Ref PublicLoadBalancerSecurityGroup
