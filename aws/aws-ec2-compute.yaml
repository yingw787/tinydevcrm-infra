AWSTemplateFormatVersion: "2010-09-09"

Description: "Compute layer for EC2 instances for TinyDevCRM"

Parameters:
  InstanceType:
    Type: String
    Default: t2.small
    Description: WebServer EC2 instance type

  KeyName:
    Type: "AWS::EC2::KeyPair::KeyName"
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
    Description: The EC2 Key Pair to allow SSH access to the instances

  OperatorEMail:
    Type: String
    AllowedPattern: ([a-zA-Z0-9_\-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([a-zA-Z0-9\-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)
    ConstraintDescription: must be a valid email address.
    Description: EMail address to notify if there are any scaling operations

  SSHLocation:
    Type: String
    Default: "0.0.0.0/0"
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Description: The IP address range that can be used to SSH to the EC2 instances
    MaxLength: "18"
    MinLength: "9"

  Subnets:
    Type: "List<AWS::EC2::Subnet::Id>"
    Default:
        - !ImportValue 'tinydevcrm-ec2-networking-subnet-a'
        - !ImportValue 'tinydevcrm-ec2-networking-subnet-b'
    ConstraintDescription: must be a list of at least two existing subnets associated with at least two different availability zones. They should be residing in the selected Virtual Private Cloud.
    Description: The list of SubnetIds in your Virtual Private Cloud (VPC)

  VpcId:
    Type: "AWS::EC2::VPC::Id"
    Default: !ImportValue 'tinydevcrm-ec2-networking-vpc'
    Description: VpcId of your existing Virtual Private Cloud (VPC)

Mappings:
  AWSInstanceType2Arch:
    t2.small:
      Arch: HVM64

  AWSInstanceType2NATArch:
    t2.small:
      Arch: NATHVM64

  AWSRegionArch2AMI:
    us-east-1:
      HVM64: ami-0080e4c5bc078760e
      HVMG2: ami-0aeb704d503081ea6

  Region2Examples:
    ap-northeast-1:
      Examples: "https://s3-ap-northeast-1.amazonaws.com/cloudformation-examples-ap-northeast-1"
    ap-northeast-2:
      Examples: "https://s3-ap-northeast-2.amazonaws.com/cloudformation-examples-ap-northeast-2"
    ap-northeast-3:
      Examples: "https://s3-ap-northeast-3.amazonaws.com/cloudformation-examples-ap-northeast-3"
    ap-south-1:
      Examples: "https://s3-ap-south-1.amazonaws.com/cloudformation-examples-ap-south-1"
    ap-southeast-1:
      Examples: "https://s3-ap-southeast-1.amazonaws.com/cloudformation-examples-ap-southeast-1"
    ap-southeast-2:
      Examples: "https://s3-ap-southeast-2.amazonaws.com/cloudformation-examples-ap-southeast-2"
    ca-central-1:
      Examples: "https://s3-ca-central-1.amazonaws.com/cloudformation-examples-ca-central-1"
    cn-north-1:
      Examples: "https://s3.cn-north-1.amazonaws.com.cn/cloudformation-examples-cn-north-1"
    cn-northwest-1:
      Examples: "https://s3.cn-northwest-1.amazonaws.com.cn/cloudformation-examples-cn-northwest-1"
    eu-central-1:
      Examples: "https://s3-eu-central-1.amazonaws.com/cloudformation-examples-eu-central-1"
    eu-north-1:
      Examples: "https://s3-eu-north-1.amazonaws.com/cloudformation-examples-eu-north-1"
    eu-west-1:
      Examples: "https://s3-eu-west-1.amazonaws.com/cloudformation-examples-eu-west-1"
    eu-west-2:
      Examples: "https://s3-eu-west-2.amazonaws.com/cloudformation-examples-eu-west-2"
    eu-west-3:
      Examples: "https://s3-eu-west-3.amazonaws.com/cloudformation-examples-eu-west-3"
    sa-east-1:
      Examples: "https://s3-sa-east-1.amazonaws.com/cloudformation-examples-sa-east-1"
    us-east-1:
      Examples: "https://s3.amazonaws.com/cloudformation-examples-us-east-1"
    us-east-2:
      Examples: "https://s3-us-east-2.amazonaws.com/cloudformation-examples-us-east-2"
    us-west-1:
      Examples: "https://s3-us-west-1.amazonaws.com/cloudformation-examples-us-west-1"
    us-west-2:
      Examples: "https://s3-us-west-2.amazonaws.com/cloudformation-examples-us-west-2"

Resources:
  ALBListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: "80"
      Protocol: HTTP

  ALBTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: !Ref VpcId

  ApplicationLoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Subnets: !Ref Subnets

  CPUAlarmHigh:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      AlarmActions:
        - Ref: WebServerScaleUpPolicy
      AlarmDescription: Scale-up if CPU > 90% for 10 minutes
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref WebServerGroup
      EvaluationPeriods: "2"
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Period: "300"
      Statistic: Average
      Threshold: "90"

  CPUAlarmLow:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      AlarmActions:
        - Ref: WebServerScaleDownPolicy
      AlarmDescription: Scale-down if CPU < 70% for 10 minutes
      ComparisonOperator: LessThanThreshold
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref WebServerGroup
      EvaluationPeriods: "2"
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Period: "300"
      Statistic: Average
      Threshold: "70"

  InstanceSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Enable SSH access and HTTP from the load balancer only
      SecurityGroupIngress:
        - CidrIp: !Ref SSHLocation
          FromPort: "22"
          IpProtocol: tcp
          ToPort: "22"
        - FromPort: "80"
          IpProtocol: tcp
          SourceSecurityGroupId: !Select
            - 0
            - "Fn::GetAtt":
                - ApplicationLoadBalancer
                - SecurityGroups
          ToPort: "80"
      VpcId: !Ref VpcId

  LaunchConfig:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Metadata:
      "AWS::CloudFormation::Init":
        config:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Join
                - ""
                - - "[main]\n"
                  - stack=
                  - Ref: "AWS::StackId"
                  - "\n"
                  - region=
                  - Ref: "AWS::Region"
                  - "\n"
              group: root
              mode: "000400"
              owner: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Join
                - ""
                - - "[cfn-auto-reloader-hook]\n"
                  - "triggers=post.update\n"
                  - "path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init\n"
                  - "action=/opt/aws/bin/cfn-init -v "
                  - "         --stack "
                  - Ref: "AWS::StackName"
                  - "         --resource LaunchConfig "
                  - "         --region "
                  - Ref: "AWS::Region"
                  - "\n"
                  - "runas=root\n"
              group: root
              mode: "000400"
              owner: root
            /var/www/html/index.html:
              content: !Join
                - "\n"
                - - "<img src=\""
                  - "Fn::FindInMap":
                      - Region2Examples
                      - Ref: "AWS::Region"
                      - Examples
                  - "/cloudformation_graphic.png\" alt=\"AWS CloudFormation Logo\"/>"
                  - <h1>Congratulations, you have successfully launched the AWS CloudFormation sample.</h1>
              group: root
              mode: "000644"
              owner: root
          packages:
            yum:
              httpd: []
          services:
            sysvinit:
              cfn-hup:
                enabled: "true"
                ensureRunning: "true"
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
              httpd:
                enabled: "true"
                ensureRunning: "true"
      Comment: Install a simple application
    Properties:
      ImageId: !FindInMap
        - AWSRegionArch2AMI
        - Ref: "AWS::Region"
        - "Fn::FindInMap":
            - AWSInstanceType2Arch
            - Ref: InstanceType
            - Arch
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      SecurityGroups:
        - Ref: InstanceSecurityGroup
      UserData: !Base64
        "Fn::Join":
          - ""
          - - "#!/bin/bash -xe\n"
            - "yum update -y aws-cfn-bootstrap\n"
            - "yum update -y aws-cli\n"
            - "/opt/aws/bin/cfn-init -v "
            - "         --stack "
            - Ref: "AWS::StackName"
            - "         --resource LaunchConfig "
            - "         --region "
            - Ref: "AWS::Region"
            - "\n"
            - "/opt/aws/bin/cfn-signal -e $? "
            - "         --stack "
            - Ref: "AWS::StackName"
            - "         --resource WebServerGroup "
            - "         --region "
            - Ref: "AWS::Region"
            - "\n"

  NotificationTopic:
    Type: "AWS::SNS::Topic"
    Properties:
      Subscription:
        - Endpoint: !Ref OperatorEMail
          Protocol: email

  WebServerGroup:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    CreationPolicy:
      ResourceSignal:
        Count: "1"
        Timeout: PT15M
    Properties:
      LaunchConfigurationName: !Ref LaunchConfig
      MaxSize: "3"
      MinSize: "1"
      NotificationConfiguration:
        NotificationTypes:
          - "autoscaling:EC2_INSTANCE_LAUNCH"
          - "autoscaling:EC2_INSTANCE_LAUNCH_ERROR"
          - "autoscaling:EC2_INSTANCE_TERMINATE"
          - "autoscaling:EC2_INSTANCE_TERMINATE_ERROR"
        TopicARN: !Ref NotificationTopic
      TargetGroupARNs:
        - Ref: ALBTargetGroup
      VPCZoneIdentifier: !Ref Subnets
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: "1"
        MinInstancesInService: "1"
        PauseTime: PT15M
        WaitOnResourceSignals: "true"

  WebServerScaleDownPolicy:
    Type: "AWS::AutoScaling::ScalingPolicy"
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref WebServerGroup
      Cooldown: "60"
      ScalingAdjustment: "-1"

  WebServerScaleUpPolicy:
    Type: "AWS::AutoScaling::ScalingPolicy"
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref WebServerGroup
      Cooldown: "60"
      ScalingAdjustment: "1"

Outputs:
  URL:
    Description: The URL of the website
    Value: !Join
      - ""
      - - "http://"
        - "Fn::GetAtt":
            - ApplicationLoadBalancer
            - DNSName
